#+TITLE: my-org-gtd: GTD implementation bricks in Org

* Introduction

This is a set of building blocks for a task management implementation in Org
following GTD (Getting Things Done), with focus on agenda views for contexts and
automation

* Configuration

The package puts constraints on the Org configuration for the purposes of GTD
implementation:
- A /project/ is tagged with a configurable project category-specific tag and also
  has a TODO entry keyword.
- /Someday-maybe/ items are marked with their category tag, which is configured to be
  inheritable in ~org~. The items are moved to and from someday/maybe by refiling,
  thus there should be at least one top-level heading tagged with this tag.

Tasks (and some other items such projects) are grouped into lists, as in GTD. A list
has an Org tag for its items, a quick selection character, and a description. The
list-related customization is:
- ~my-org-gtd-contexts~: An (elisp) list of GTD contexts, except for the waiting-for
  one. They, together with the waiting-for context, are mutually exclusive.
- ~my-org-gtd-waitingfor-context~: The GTD waiting-for context. Defaults to
  =@waitingfor= / =w=
- ~my-org-gtd-project-list~: The GTD project list. Defaults to =project= / =p=.
- ~my-org-gtd-somedaymaybe-list~: The GTD someday/maybe list. Defaults to
  =somedaymaybe= / =m=.

For actions, there are three customizable TODO entry keywords:
- ~my-org-gtd-next-action-keyword~: The keyword for the next action (in the GTD
  sense). Active projects have this keyword too. Defaults to =TODO=
- ~my-org-gtd-done-keyword~: The keyword for a completed task or project. Defaults to
  =DONE=.
- ~my-org-gtd-cancelled-keyword~: The keyword for a cancelled task or project.
  Defaults to =KILL=.

For clocking automation:
- ~my-org-gtd-clock-gated-commands~: A list of commands, which may only be invoked
  with an Org clock running.
- ~my-org-gtd-clock-in-actions~: a list of plists configuring automatic actions to be
  executed on clocking-in the node that has one of the configured properties.

* Usage

Set the configuration as described above, then call ~my-org-gtd-initialize~. Beware
that calling it multiple times in the same session may have unexpected results on the
Org variables it touches.

** Building Agenda Views

There are a few functions that can be used in ~org-agenda-custom-commands~:
- ~my-org-gtd-agenda-block (contexts &optional header)~: return a ~tags-todo~ form to
  be included in a custom agenda view for either a single context or a list of them.
  If a header is not passed and it's a single context, use its description as the
  header.
- ~my-org-gtd-agenda (context)~: return a sublist (everything except the leading key)
  for a single ~org-agenda-custom-commands~ entry.
- ~my-org-gtd-somedaymaybe-agenda~: return a sublist for a single custom command
  entry for the someday/maybe items.
- ~my-org-gtd-active-project-tasks-agenda~: return a sublist for active next actions
  that are not under any project.
- ~my-org-gtd-archivable-tasks~: return a ~tags~ form to be included in a custom
  agenda view that shows completed items which are not under any project.
- ~my-org-gtd-contextless-tasks~: return a ~tags~ form to be included in a custom
  agenda view that shows items which are not tagged with any context.

TODO example

** Elisp Automation Library

- ~my-org-gtd-require-org-clock~: call this from interactive commands to block them
  unless an Org clock is running. For the commands written by someone else, use
  ~my-org-clock-gated-commands~ instead.
- ~my-org-gtd-with-org-node-with-url (url &rest body)~: a macro to find the Org node
  with this URL across Org agenda files and then execute the body forms there.
- ~my-org-gtd-clock-in-org-node-with-url (url)~: find the Org node with this URL and
  clock it in.
- ~my-org-gtd-with-different-org-clock (&rest body)~: a macro to save the current Org
  clock state, clock in the current Org node, execute the body forms, and resume
  previous clocking, if any.
- ~my-org-gtd-insert-project (title)~: insert a new project with the given title at
  point.
- ~my-org-gtd-insert-waiting-for-next-action (title)~: insert a new waiting-for item
  at point.
- ~my-org-gtd-complete-item~: mark the item at point (a next action or a project) as
  completed.

* Comparison with other ~org~ GTD packages

** =org-gtd=

=org-gtd= provides a full prescriptive GTD implementation, covering the whole
workflow. This package, on the other hand, provides some of the building blocks to
build your own implementation without prescribing the whole workflow.

** =org-edna=

=org-edna= provides dependency management for =org= tasks for automation. While this
package also focuses on automation, it does not focus on the dependencies much. Both
packages can be used together.

* License

TODO
