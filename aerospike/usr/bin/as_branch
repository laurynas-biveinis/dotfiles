#!/bin/bash

# Manage Aerospike CE/EE branch pairs: create a set of branches, optionally with
# a starting point; checkout a set of branches; fetch remotes; remove a set of
# worktrees and their branches.
#
# In case of checkout or create, Emacs project will be set up and Aerospike
# server built in EE flavor.

set -euo pipefail

readonly COMMAND=${1-UNDEFINED}

if [[ $COMMAND != "create" && $COMMAND != "checkout" && $COMMAND != "fetch" && \
          $COMMAND != "pull" && $COMMAND != "rm" || \
      $COMMAND == "UNDEFINED" ]]
then
    echo "Usage: $0 create branch [starting_point]"
    echo "Usage: $0 checkout branch"
    echo "       $0 fetch"
    echo "       $0 pull"
    echo "       $0 rm branch"
    exit 1
fi

function do_fetch () {
    pushd "$EE_MASTER" || exit 1
    git fetch --all -p --recurse-submodules=yes -j 5
    popd || exit 1

    pushd "$CE_MASTER" || exit 1
    git fetch --all -p --recurse-submodules=yes -j 5
    popd || exit 1
}

function do_pull () {
    pushd "ee" || exit 1
    git pull --all --ff-only --recurse-submodules=yes
    popd || exit 1

    pushd "ce" || exit 1
    git pull --all --ff-only --recurse-submodules=yes
    popd || exit 1
}

function do_rm () {
    rm -rf "$BRANCH_ROOT" || exit 1

    pushd "$EE_MASTER" || exit 1
    git worktree prune
    git branch -d "$BRANCH"
    popd || exit 1

    pushd "$CE_MASTER" || exit 1
    git worktree prune
    git branch -d "$BRANCH"
    popd || exit 1
}

if [[ $COMMAND == "pull" ]]; then
    do_pull
    exit 0
fi

readonly CE_MASTER="$ASD_MASTER/ce"
readonly EE_MASTER="$ASD_MASTER/ee"

if [[ $COMMAND == "fetch" ]]; then
    do_fetch
    exit 0
fi

pushd "$ASD_BRANCHES" || exit 1

readonly BRANCH=$2

readonly BRANCH_ROOT=$ASD_BRANCHES/$BRANCH

if [[ $COMMAND == "rm" ]]; then
    do_rm
    popd || exit 0
    exit 0
fi

if [[ $COMMAND == "create" && "$#" -gt 2 ]]; then
    readonly START_POINT=$3
fi

readonly SUPPORT_FILE_DIR="$HOME/dotfiles/aerospike/aerospike"

mkdir "$BRANCH"

pushd "$EE_MASTER" || exit 1
if [[ $COMMAND == "create" ]]; then
    git worktree add "$BRANCH_ROOT/ee" -b "$BRANCH" \
        ${START_POINT:+"$START_POINT"}
else
    git worktree add "$BRANCH_ROOT/ee" "$BRANCH"
fi
popd || exit 1

pushd "$CE_MASTER" || exit 1
if [[ $COMMAND == "create" ]]; then
    git worktree add "$BRANCH_ROOT/ce" -b "$BRANCH" \
        ${START_POINT:+"$START_POINT"}
else
    git worktree add "$BRANCH_ROOT/ce" "$BRANCH"
fi
popd || exit 1

pushd "$BRANCH/ee" || exit 1
git submodule update --init
ln -sf "../ce/compile_commands.json" .
popd || exit 1

pushd "$BRANCH/ce" || exit 1
git submodule update --init
popd || exit 1

pushd "$BRANCH" || exit 1
ln -sf "$SUPPORT_FILE_DIR/.clang-format" .
cp "$SUPPORT_FILE_DIR/asd-.dir-locals.el" .dir-locals.el
ln -sf "$SUPPORT_FILE_DIR/asd-Makefile" Makefile
touch .projectile
make build
popd || exit 0

popd || exit 0
